{"version":3,"sources":["components/Display/Display.module.css","components/SetValue/SetValue.module.css","components/Button/Button.module.css","components/Display/Display.tsx","components/Button/Button.tsx","components/SetValue/SetValue.tsx","components/Settings/Settings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Display","props","style","displayValue","maxValue","classes","display","red","className","editMode","hasError","error","Button","button","onClick","disabled","btnName","SetValue","input","set_value","setTitle","type","onChange","e","currentTarget","value","setValue","Settings","useState","setMaxValue","minValue","setMinValue","currentErrorValue","setError","newValue","currentEditModeValue","enableEditMode","setThresholdValues","App","startValue","currentValue","setMode","counter","setCounter","console","log","newStartValue","newMaxValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5881b031.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__3um4N\",\"red\":\"Display_red__nTKOu\",\"error\":\"Display_error__1H2_f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"set_value\":\"SetValue_set_value__2mC4_\",\"input\":\"SetValue_input__2h3rf\",\"red\":\"SetValue_red__j8Np1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2M2RE\"};","import React from \"react\";\r\nimport classes from \"./Display.module.css\";\r\n\r\ntype DisplayType = {\r\n    displayValue: number\r\n    maxValue: number\r\n    hasError: boolean\r\n    editMode: boolean\r\n}\r\n\r\nexport function Display(props: DisplayType) {\r\n    const style = (props.displayValue === props.maxValue) ? `${classes.display} ${classes.red}` : classes.display\r\n    return (\r\n        <div className={style}>\r\n            {props.editMode\r\n                ? props.hasError\r\n                    ? <span className={`${classes.error} ${classes.red}`}>Invalid value</span>\r\n                    : <span className={classes.error}>edit mode press SET to set params</span>\r\n\r\n                : <span>{props.displayValue}</span>}\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport classes from \"./Button.module.css\";\r\n\r\ntype ButtonType = {\r\n    btnName: string\r\n    onClick: () => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport function Button(props: ButtonType) {\r\n    return (\r\n        <button className={classes.button}\r\n                onClick={props.onClick}\r\n                disabled={props.disabled ? props.disabled : false}\r\n        >{props.btnName}</button>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport classes from \"./SetValue.module.css\";\r\n\r\ntype SetValueType = {\r\n    setValue: number\r\n    setTitle: string\r\n    error: boolean\r\n    onChange: (value: number) => void\r\n}\r\n\r\nexport function SetValue(props: SetValueType) {\r\n\r\n    const style = props.error ? `${classes.input} ${classes.red}` : `${classes.input}`\r\n\r\n    return (\r\n        <div className={classes.set_value}>\r\n            <div>{props.setTitle}</div>\r\n            <input className={style}\r\n                   type=\"number\"\r\n                   onChange={(e)=> props.onChange(+e.currentTarget.value)}\r\n                   value={props.setValue}/>\r\n        </div>\r\n    )\r\n}\r\n","import {SetValue} from \"../SetValue/SetValue\";\r\nimport {Button} from \"../Button/Button\";\r\nimport React, {useState} from \"react\";\r\n\r\n\r\ntype PropsType = {\r\n    setThresholdValues: (minValue: number, maxValue: number) => void\r\n    enableEditMode: (value: boolean) => void\r\n    setError: (value: boolean) => void\r\n    currentErrorValue: boolean\r\n    currentEditModeValue: boolean\r\n}\r\n\r\nexport function Settings(props: PropsType) {\r\n\r\n    let [maxValue, setMaxValue] = useState<number>(5)\r\n    let [minValue, setMinValue] = useState<number>(0)\r\n\r\n    function setMaxValueHandler(newValue: number) {\r\n        setMaxValue(newValue)\r\n        if (!props.currentEditModeValue) props.enableEditMode(true)\r\n    }\r\n\r\n    function setMinValueHandler(newValue: number) {\r\n        setMinValue(newValue)\r\n        if (!props.currentEditModeValue) props.enableEditMode(true)\r\n    }\r\n\r\n    function setThresholdValuesHandler() {\r\n        props.setThresholdValues(minValue, maxValue)\r\n    }\r\n\r\n    if (maxValue < minValue) {\r\n        if (!props.currentErrorValue) props.setError(true)\r\n    } else {\r\n        if (props.currentErrorValue) props.setError(false)\r\n    }\r\n\r\n    return (\r\n        <div className={\"app\"}>\r\n            <div className=\"settings-values\">\r\n                <SetValue setValue={maxValue}\r\n                          setTitle={'max value'}\r\n                          onChange={setMaxValueHandler}\r\n                          error={minValue > maxValue}/>\r\n                <SetValue setValue={minValue}\r\n                          setTitle={'start value'}\r\n                          onChange={setMinValueHandler}\r\n                          error={minValue > maxValue}/>\r\n            </div>\r\n            <div className={'main-buttons settings'}>\r\n                <Button btnName={\"set\"}\r\n                        disabled={maxValue < minValue}\r\n                        onClick={setThresholdValuesHandler}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Display} from \"./components/Display/Display\";\nimport {Button} from \"./components/Button/Button\";\nimport {Settings} from \"./components/Settings/Settings\";\n\nexport type CounterType = {\n    startValue: number\n    maxValue: number\n    currentValue: number\n    hasError: boolean\n    setMode: boolean\n}\n\nfunction App() {\n\n    const [counter, setCounter] = useState<CounterType>({\n        startValue: 0,\n        maxValue: 5,\n        currentValue: 0,\n        hasError: false,\n        setMode: false,\n    })\n\n    function increaseCounter() {\n        setCounter({...counter, currentValue: counter.currentValue + 1})\n    }\n\n    function resetCounter() {\n        setCounter({...counter, currentValue: counter.startValue})\n    }\n\n    function setThresholdValues(newStartValue: number, newMaxValue: number) {\n        setCounter({...counter, maxValue: newMaxValue, startValue: newStartValue, setMode: false, currentValue: newStartValue})\n\n    }\n\n    function setError(value: boolean) {\n        setCounter({...counter, hasError: value})\n    }\n\n    function editMode(value: boolean) {\n        setCounter({...counter, setMode: value})\n    }\n\n    console.log(counter)\n    return (\n        <div>\n            <div className={\"app\"}>\n                <Display displayValue={counter.currentValue}\n                         hasError={counter.hasError}\n                         editMode={counter.setMode}\n                         maxValue={counter.maxValue}/>\n                <div className={'main-buttons'}>\n                    <Button btnName={\"inc\"}\n                            disabled={counter.currentValue === counter.maxValue || counter.setMode}\n                            onClick={increaseCounter}/>\n                    <Button btnName={\"reset\"}\n                            disabled={counter.currentValue === 0 || counter.setMode}\n                            onClick={resetCounter}/>\n                </div>\n            </div>\n            <Settings\n                setThresholdValues={setThresholdValues}\n                enableEditMode={editMode}\n                setError={setError}\n                currentErrorValue={counter.hasError}\n                currentEditModeValue={counter.setMode}\n            />\n        </div>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}